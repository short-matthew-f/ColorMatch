{"version":3,"sources":["constants.js","Cell.js","Grid.js","utils.js","Game.js","app.js"],"names":["BOARD_SIZE","CELL_TYPES","Cell","value","el","document","createElement","classList","add","style","backgroundColor","Math","floor","length","random","Grid","rows","_buildRows","_buildEl","size","i","row","j","push","pos","col","cell","posOne","posTwo","cellOne","_getCell","_setCell","gridEl","forEach","rowEl","appendChild","getEl","once","func","hasHappened","Game","gameEl","initialCell","grid","isAnimating","_render","_setListeners","swapAfterTransitionend","bind","initialPos","targetPos","evt","log","cellTwo","cellOneRect","getBoundingClientRect","cellTwoRect","top","left","getPosition","addEventListener","swapCells","target","matches","remove","targetCell","_swapEls","_swapCells","parentNode","children","indexOf","firstChild","game","getElementById"],"mappings":"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","file":"app.ec941dd2.map","sourceRoot":"../src","sourcesContent":["export const BOARD_SIZE = 11;\n\nexport const CELL_TYPES = [\n  'red', 'green', 'lightblue', 'yellow', 'white', 'lavender', 'orange', 'pink'\n];","import { CELL_TYPES } from './constants'\n\nclass Cell {\n  constructor(value) {\n    this.value = value;\n  }\n\n  static random() {\n    return new Cell(\n      CELL_TYPES[Math.floor(CELL_TYPES.length * Math.random())]\n    )\n  }\n\n  getEl() { \n    const el = document.createElement('div');\n    el.classList.add('cell');\n    el.style.backgroundColor = this.value;\n    return el;\n  }\n}\n\nexport default Cell;","import { BOARD_SIZE } from './constants'\n\nimport Cell from './Cell'\n\nclass Grid {\n  constructor() {\n    this.rows = this._buildRows(BOARD_SIZE);\n    this.el = this._buildEl()\n  }\n\n  _buildEl() {\n    const el = document.createElement('div')\n  }\n\n  _buildRows(size) {\n    const rows = [];\n\n    for (let i = 0; i < size; i++) {\n      const row = [];\n\n      for (let j = 0; j < size; j++) {\n        row.push(Cell.random());\n      }\n\n      rows.push(row);\n    }\n\n    return rows;\n  }\n\n  _getCell(pos) {\n    return this.rows[pos.row][pos.col];\n  }\n\n  _setCell(pos, cell) {\n    this.rows[pos.row][pos.col] = cell;\n  }\n\n  swapCells(posOne, posTwo) {\n    const cellOne = this._getCell(posOne);\n    this._setCell(posOne, this._getCell(posTwo));\n    this._setCell(posTwo, cellOne);\n  }\n\n  getEl() {\n    const gridEl = document.createElement('div');\n    gridEl.classList.add('grid');\n\n    this.rows.forEach(row => {\n      const rowEl = document.createElement('div');\n      rowEl.classList.add('row');\n\n      row.forEach(cell => {\n        rowEl.appendChild(cell.getEl());\n      })\n\n      gridEl.appendChild(rowEl);\n    })\n\n    return gridEl;\n  }\n}\n\nexport default Grid;","export const once = (func) => {\n  let hasHappened = false;\n\n  return function(...args) {\n    if (hasHappened) { return; }\n\n    hasHappened = true;\n    return func(...args);\n  }\n}","import Grid from './Grid';\nimport { once } from './utils';\n\nclass Game {\n  constructor(gameEl) {\n    this.gameEl = gameEl;\n    this.initialCell = null;\n    this.grid = new Grid();\n\n    this.isAnimating = false;\n\n    this._render();\n    this._setListeners();\n\n    this.swapAfterTransitionend = this.swapAfterTransitionend.bind(this)\n  }\n\n  swapAfterTransitionend(initialPos, targetPos, evt) {\n    console.log(\"TRANSITIONENDSWAP TRIGGERING\")\n    \n  }\n\n  _swapEls(cellOne, cellTwo) {\n    const cellOneRect = cellOne.getBoundingClientRect();\n    const cellTwoRect = cellTwo.getBoundingClientRect();\n\n    cellTwo.style.top = cellOneRect.top - cellTwoRect.top;\n    cellTwo.style.left = cellOneRect.left - cellTwoRect.left;\n    cellOne.style.top = cellTwoRect.top - cellOneRect.top;\n    cellOne.style.left = cellTwoRect.left - cellOneRect.left;\n  }\n\n  _swapCells(cellOne, cellTwo) {\n    const posOne = this.getPosition(cellOne);\n    const posTwo = this.getPosition(cellTwo);\n\n    cellOne.addEventListener('transitionend', once(() => {\n      this.isAnimating = false;\n      this.grid.swapCells(posOne, posTwo);     \n      this._render();\n    }));\n  }\n\n  _setListeners() {\n    this.gameEl.addEventListener('mousedown', (evt) => {\n      if (this.isAnimating || !evt.target.matches('.cell')) { return; }\n\n      if (this.initialCell && this.initialCell == evt.target) {\n        this.initialCell.classList.remove('selected');\n        this.initialCell = null;\n        return;\n      }\n\n      if (this.initialCell) {\n        const initialCell = this.initialCell;\n        const targetCell = evt.target;\n\n        this.isAnimating = true;\n        \n        this.initialCell.classList.remove('selected');\n        this.initialCell = null;\n\n        this._swapEls(initialCell, targetCell);\n        this._swapCells(initialCell, targetCell);\n      } else {\n        this.initialCell = evt.target;\n        this.initialCell.classList.add('selected')\n      }\n    })\n  }\n\n  getPosition(cell) {\n    if (!cell.matches('.cell')) { return; }\n\n    const col = [...cell.parentNode.children].indexOf(cell);\n    const row = [...this.gridEl.children].indexOf(cell.parentNode);\n\n    return { row, col };\n  }\n\n  _render() {\n    while (this.gameEl.firstChild) {\n      this.gameEl.firstChild.remove();\n    }\n    \n    this.gridEl = this.grid.getEl();\n    this.gameEl.appendChild(this.gridEl);\n  }\n}\n\nexport default Game;","import Game from './Game'\n\nconst game = new Game(\n  document.getElementById('game')\n)\n"]}